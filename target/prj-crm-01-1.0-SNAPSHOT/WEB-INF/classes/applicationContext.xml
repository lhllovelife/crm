<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">


<!--spring整和mybatis共需三步-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--1. 配置数据源（druid数据库连接池）-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
    </bean>
    <!--2. 注册sqlSessionFactory的bean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定 mybatis主配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>
    <!--3. 注册mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--指定要扫描的包，即存放dao接口的包-->
        <!--在basePackage中使用逗号或者分号作为分隔符去给映射器接口文件设置多个包的路径，让其能够被递归扫描到。-->
        <property name="basePackage" value="cn.andylhl.crm.settings.dao,cn.andylhl.crm.workbench.dao"/>
    </bean>

    <!--使用Aspect AOP配置声明式事务-->
    <!--1. 声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--配置数据源属性-->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--2. 声明事务属性-->
    <tx:advice id="crmAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="login" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
            <tx:method name="convert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--3.配置AOP -->
    <aop:config>
        <!--配置切入点表达式：指定哪些包中类，要使用事务
            id:切入点表达式的名称，唯一值
            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象
            com.bjpowernode.service
            com.crm.service
            com.service
        -->
        <aop:pointcut id="servicePt" expression="execution(* *..service..*.*(..))"/>

        <!--配置增强器：关联adivce和pointcut
           advice-ref:通知，上面tx:advice哪里的配置
           pointcut-ref：切入点表达式的id
        -->
        <aop:advisor advice-ref="crmAdvice" pointcut-ref="servicePt" />
    </aop:config>

<!--    &lt;!&ndash;配置StudentServiceImpl&ndash;&gt;-->
<!--    <bean id="studentService" class="cn.andylhl.crm.service.impl.StudentServiceImpl">-->
<!--        <property name="studentDao" ref="studentDao"/>-->
<!--    </bean>-->

    <!--配置UserServiceImpl中的dao属性，通过包扫描器，IoC容器自动帮我们创建好了所有的Dao对象-->
    <bean id="userServiceImpl" class="cn.andylhl.crm.settings.service.impl.UserServiceImpl">
        <property name="userDao" ref="userDao"/>
    </bean>

    <!--声明ActivityServiceImpl-->
    <bean id="activityServiceImpl" class="cn.andylhl.crm.workbench.service.impl.ActivityServiceImpl">
        <!--set注入-->
        <property name="activityDao" ref="activityDao"/>
        <property name="activityRemarkDao" ref="activityRemarkDao"/>
    </bean>

    <!--声明DicServiceImpl-->
    <bean id="dicServiceImpl" class="cn.andylhl.crm.settings.service.impl.DicServiceImpl">
        <property name="dicTypeDao" ref="dicTypeDao"/>
        <property name="dicValueDao" ref="dicValueDao"/>
    </bean>

    <!--声明ClueServiceImpl-->
    <bean id="clueServiceImpl" class="cn.andylhl.crm.workbench.service.impl.ClueServiceImpl">
        <property name="activityDao" ref="activityDao"/>
        <property name="clueDao" ref="clueDao"/>
        <property name="clueRemarkDao" ref="clueRemarkDao"/>
        <property name="clueActivityRelationDao" ref="clueActivityRelationDao"/>

        <property name="customerDao" ref="customerDao"/>
        <property name="customerRemarkDao" ref="customerRemarkDao"/>

        <property name="contactsDao" ref="contactsDao"/>
        <property name="contactsRemarkDao" ref="contactsRemarkDao"/>
        <property name="contactsActivityRelationDao" ref="contactsActivityRelationDao"/>

        <property name="tranDao" ref="tranDao"/>
        <property name="tranRemarkDao" ref="tranRemarkDao"/>
        <property name="tranHistoryDao" ref="tranHistoryDao"/>
    </bean>

    <!--声明CustomerServiceImpl-->
    <bean id="customerServiceImpl" class="cn.andylhl.crm.workbench.service.impl.CustomerServiceImpl">
        <property name="customerDao" ref="customerDao"/>
    </bean>
</beans>